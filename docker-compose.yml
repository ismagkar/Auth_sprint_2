version: '3'

services:
  db:
    image: postgres:13.0-alpine
    container_name: db
    restart: always
    expose:
      - "5432"
    volumes:
      - data_volume:/var/lib/postgresql/data/
      - ./psql/movies_database.sql:/docker-entrypoint-initdb.d/movies_database.sql
    env_file:
      - environments/postgres.env
      - ${PG_LOCAL_ENV_FILE:-environments/noop.env}
    user: ${POSTGRES_USER:-postgres}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 20

  auth_service:
    build:
      context: auth_service
    container_name: auth_service
    restart: always
    env_file:
      - environments/redis.env
      - environments/auth_service.env
      - environments/db.env
      - ${FAST_API_LOCAL_ENV_FILE:-environments/noop.env}
    expose:
      - "8080"
    depends_on:
      redis:
        condition: service_started

  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: always
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 5s
      timeout: 5s
      retries: 20


  admin_service:
    build: admin_service
    container_name: admin_service
    volumes:
      - static_volume:/opt/app/static/
      - media_volume:/opt/app/media/
    env_file:
      - environments/admin_service.env
      - environments/db.env
      - ${APP_LOCAL_ENV_FILE:-environments/noop.env}
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    restart: always

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    volumes:
      - ./etc/nginx.conf.template:/etc/nginx/nginx.conf.template:ro
      - ./etc/configs:/etc/nginx/conf.d:ro
      - ./data:/data/:ro
      - static_volume:/opt/app/static/
      - media_volume:/opt/app/media/
    environment:
      NGINX_SET_REAL_IPS_FROM: 192.168.1.0/24
    depends_on:
      - admin_service
    ports:
      - "80:80"
    command: >
      /bin/sh -c
      "envsubst '
      $${NGINX_SET_REAL_IPS_FROM}
      '< /etc/nginx/nginx.conf.template
      > /etc/nginx/nginx.conf
      && nginx -g 'daemon off;'"


  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: elasticsearch
    restart: always
    volumes:
      - elasticsearch_data:/opt/elasticsearch/data
    expose:
      - "9200"
    env_file:
      - environments/es_service.env
      - ${ELASTICSEARCH_LOCAL_ENV_FILE:-environments/noop.env}

  etl-service:
    build: psql_to_es
    container_name: etl-service
    restart: always
    env_file:
      - environments/db.env
      - environments/etl.env
      - environments/elasticsearch.env
      - environments/redis.env
      - ${ETL_LOCAL_ENV_FILE:-environments/noop.env}
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_started

  film_service:
    build:
      context: film_service
      target: production
    container_name: film_service
    restart: always
    env_file:
      - environments/redis.env
      - environments/elasticsearch.env
      - environments/film_service.env
      - ${FAST_API_LOCAL_ENV_FILE:-environments/noop.env}
    expose:
      - "8888"
    depends_on:
      elasticsearch:
        condition: service_started
      redis:
        condition: service_started

volumes:
  data_volume:
  static_volume:
  media_volume:
  elasticsearch_data:
  redis_data:
